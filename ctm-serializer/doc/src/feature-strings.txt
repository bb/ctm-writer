== Feature String ==

The writer provides some additional features represent by special string patterns called features strings.

=== writer.identity.engineprefix ===

The property *writer.identity.engineprefix* defines the prefix of identifier generated by the topic map engine. This prefix will be used to detect generated identifiers used as item-identifiers or subject-identifiers to exclude them from the export process.

The value of this property should be a string representing the QName or baseURI of the used topic maps engine. In case of using the tinyTiM Engine or the Ontopia engine the value should be *urn*.  

=== writer.features.export.itemidentifier ===

The boolean property *writer.features.export.itemidentifier* enables or disables the export of item-identifiers. This feature can be necessary if the used CTM reader does not support item-identifiers. The value of this property should be *true* or *false*, default is *false*.

=== writer.features.prefixDetection.enabled ===

The boolean property *writer.features.prefixDetection.enabled* enables or disables the automatic prefix detection algorithm. If this feature is enabled, the writer tries to detect prefixes automatically. The default value is *true*. 

=== writer.features.templateDetection.enabled ===

The boolean property *writer.features.templateDetection.enabled* enables or disables the template detection algorithm. If this property is enabled the writer try to detect templates by extracting the ontology knowledge of given topic items and association items. The default value is *false*.

=== writer.features.templateDetection.topicTemplates ===

The boolean property *writer.features.templateDetection.topicTemplates* enables or disables the template detection algorithm. If this property is enabled the writer try to detect templates for topic items by extracting the ontology knowledge of given topic items. The default value is *false*.

=== writer.features.templateDetection.associationTemplates ===

The boolean property *writer.features.templateDetection.associationTemplates* enables or disables the template detection algorithm. If this property is enabled the writer try to detect templates for association items by extracting the ontology knowledge of given association items. The default values is *false*.

=== writer.features.templateDetection.relevanceThreshold ===

The property *writer.features.templateDetection.relevanceThreshold* represents the threshold used in the context of the template detection algorithm. This threshold defines the minimum percentage of topic items which have to match to the detected template candidate. The default value is *0.8* or *80%*.

=== writer.features.templateMerger.enabled ===

The boolean property "writer.features.templateMerger.enabled* enables or disables the template merging algorithm. The algorithm tries to detect intersections between template and try to extract them by using template-invocations.  The default value is *false*.

=== writer.features.templateMerger.threshold ===

The property *writer.features.templateMerger.threshold* define the minimum number of templates as a part of the intersection. The default value is *false*.

=== writer.features.templateExport.enabled ===

The property *writer.features.templateExport.enabled* enables to template export to the final CTM document. If the property is bound to the value 'true', all templates will be exported, except the restricted one. If the value is 'false' no template will be exported.